// Designed by Michael Blanc <<kd2cmo>> New Jersey
#include <Adafruit_GFX.h>
#include <Adafruit_ST7735.h>
#include <SPI.h>
#include <EEPROM.h>
#include <Bounce2.h>

// OLED Display Setup
//#define tftSclk       13 // Used in software constructor, slower, but allows to re-program mosi and sclk to other pins
//#define tftMosi       11 // same as above
#define tftCS           10
#define tftRST           9
#define tftDC            8
//
Adafruit_ST7735 tft = Adafruit_ST7735(tftCS, tftDC, tftRST);
// Encoder Pins
#define pindebouncerCW   4 // switched with 3 as 4 doesn't have PWM
#define pinEncoderCCW    2 
#define pinButtonParam1 A0  
#define pinButtonParam2 A1
#define pinButtonParam3 A2 
// FV1 PWM outputs
#define pinPOT1          3 // Pot1 PWM. Only D3,D5,D6,D9,D10,D11 can generate PWM signals using analogWrite()
#define pinPOT2          5 // Pot2 PWM
#define pinPOT3          6 // Pot3 PWM
// Digital Outputs Rom Select
#define pinS0           A3
#define pinS1           A4
#define pinS2           A5
#define pinRom1          0 // A6 A7 cannot be used w/ digitalWrite()
#define pinRom2          1 // A6 A7 cannot be used w/ digitalWrite()
#define pinRomEnable     7
// Button Bypass
#define pinButtonBypass 12 // Encoder button connected to
#define DEBOUNCE_DELAY  50 // Debounce time in milliseconds
bool latchedState   = LOW; // Stores the toggled state
//
const int outputPins[] = {pinS0, pinS1, pinS2, pinRom1, pinRom2, pinRomEnable};

// Encoder Setup
volatile int8_t position  = 0; // Tracks partial steps (0-3)

Bounce btnParam1    = Bounce(); 
Bounce btnParam2    = Bounce(); 
Bounce btnParam3    = Bounce(); 
Bounce debouncerCW  = Bounce();
Bounce debouncerCCW = Bounce();
Bounce btnBypass    = Bounce();

// State Transition Table (determines direction)
const int8_t stateTable[] = {
  0, -1, 1, 0,
  1, 0, 0, -1,
  -1, 0, 0, 1,
  0, 1, -1, 0
};

// Array Definition
struct Item {
  const char* name; // Use a pointer to a constant char array
  int params[3];
};
Item items[24];

int currentItem   = 0; // Last selected effect index
int currentParam  = 0;
int lastSelectedItem = -1;

// EEPROM Addresses
#define EEPROM_INIT_ADDR             0
#define EEPROM_LAST_SEL_EFFECT_ADDR  1
#define EEPROM_PARAMS_START_ADDR     2
#define EEPROM_INIT               0x11
// PWM
const int pwmMaxValue = 100;

// SETUP
void setup() {
  //Serial.begin(9600); // No Longer can be used as uart (RX/TX, pin0, pin1) pins used for digital outputs

  // Initialize OLED
  tft.initR(INITR_BLACKTAB);
  tft.setRotation(1); // Horizontal mode
  tft.fillScreen(ST77XX_BLACK);
  // Configure encoder and buttons 
  pinMode(pindebouncerCW,  INPUT_PULLUP); // set up clockwise encoder rotation 
  pinMode(pinEncoderCCW,   INPUT_PULLUP); // set up ounter clockwise encoder rotation
  pinMode(pinButtonParam1, INPUT_PULLUP); // Enable internal pull-up for button on A0
  pinMode(pinButtonParam2, INPUT_PULLUP); // Enable internal pull-up for button on A1
  pinMode(pinButtonParam3, INPUT_PULLUP); // Enable internal pull-up for button on A2
  pinMode(pinButtonBypass, INPUT_PULLUP); // Enable internal pull-up resistor
  // attach bounce objects to pins
  debouncerCW.attach(pindebouncerCW);
  debouncerCW.interval(4);           // Debounce time in ms
  debouncerCCW.attach(pinEncoderCCW);
  debouncerCCW.interval(4);          // Debounce time in ms
  btnParam1.attach(pinButtonParam1);
  btnParam2.attach(pinButtonParam2);
  btnParam3.attach(pinButtonParam3);
  btnBypass.attach(pinButtonBypass);
  btnBypass.interval(DEBOUNCE_DELAY); // 50
  //
  pinMode(pinPOT1, OUTPUT);  //POT1 PWM
  pinMode(pinPOT2, OUTPUT);  //POT2 PWM
  pinMode(pinPOT3, OUTPUT);  //POT3 PWM
  //
  const char* const names[24] = {
    "CHORUS.0", "REVERB.a0", "REVERB.b0", "TREMOLO.a0", "TREMOLO.b0", "BYPASS", "PITCH.0", "DISTORT.0",
    "CHORUS.1", "REVERB.a1", "REVERB.b1", "TREMOLO.a1", "TREMOLO.b1", "FLANGER.1", "PITCH.1", "DISTORT.1",
    "CHORUS.2", "REVERB.a2", "REVERB.b2", "TREMOLO.a2", "TREMOLO.b2", "FLANGER.2", "PITCH.2", "DISTORT.2"
  };
  // load values for names
  for (int i = 0; i < 24; i++) {
    items[i].name = names[i];
  }
  // set and initialize output pins
  for (int i = 0; i < 6; i++) {
     pinMode(outputPins[i], OUTPUT);
     digitalWrite(outputPins[i], LOW);
  }
  // set RomEnable pin
  pinMode(pinRomEnable, OUTPUT);
  digitalWrite(pinRomEnable, HIGH);

  // ON THE FIRST RUN: Check EEPROM if initialized
  if (EEPROM.read(EEPROM_INIT_ADDR) != EEPROM_INIT) {
    // Initialize EEPROM with default values if INIT is missing
    for (int i = 0; i < 24; i++) {
      for (int j = 0; j < 3; j++) {
        items[i].params[j] = 0; // Default parameters
      }
    }
    currentItem = 0;            // Default to first effect
    saveParameters();           // Save all parameters to EEPROM
    saveLastSelectedEffect();         // Save initially selected effect as first
    EEPROM.write(EEPROM_INIT_ADDR, EEPROM_INIT); // Write INIT
  } else {
    // Load all parameters and last selected effect from EEPROM
    loadParameters();
    currentItem = loadLastSelectedEffect();
  }
  // Draw the initial screen
  drawFrame();
  drawItem();
  updatePotOutputs();
}


// LOOP
void loop() { 
  static int lastPosition     = -1;
  //  
  debouncerCW.update();
  debouncerCCW.update();
  //
  int cwState = debouncerCW.read();
  int ccwState = debouncerCCW.read();
  //
  int newPosition = (cwState << 1) | ccwState;  // Combine into 2-bit value
  // Check for state change
  if (newPosition != lastPosition) {
      // Calculate direction using state table
      int8_t direction = stateTable[(lastPosition << 2) | newPosition];
      position += direction;
      // Detect full detent (4 steps = 1 click)
      if (position >= 2) {  // 4 or 2 STEPS_PER_DETENT
          lastSelectedItem = currentItem;
          currentItem = (currentItem + 1 + 24) % 24;
          position = 0;
          drawItem();
      } else if (position <= -2) {
          lastSelectedItem = currentItem;
          currentItem = (currentItem - 1 + 24) % 24;
          position = 0;
          drawItem();
      }
      //    
      lastPosition = newPosition;
      // update all outputs
      updateOutputs();
      saveLastSelectedEffect();
  }

  // update of parameter 1 of currently selected effect
  btnParam1.update();
  if (btnParam1.fell()) {
      // update value to next click w/ + 10%  
      items[currentItem].params[0] = (items[currentItem].params[0] + 10) % 110;
      // reset to zero when clicked after it reached max 100%
      if (items[currentItem].params[0] > 100) { items[currentItem].params[0] = 0; }
      // update user interface
      redrawParam(0, 60);
      // update eeprom
      saveParam(0);
      // PWM & map to output 3.3v
      applyPWM(items[currentItem].params[0], pinPOT1);
  }

  // update of parameter 2 of currently selected effect
  btnParam2.update();
  if (btnParam2.fell()) {
      // update value to next click w/ + 10%  
      items[currentItem].params[1] = (items[currentItem].params[1] + 10) % 110;
      // reset to zero when clicked after it reached max 100%
      if (items[currentItem].params[1] > 100) { items[currentItem].params[1] = 0; }
      // update user interface
      redrawParam(1, 76);
      // update eeprom
      saveParam(1);
      // PWM & map to output 3.3v
      applyPWM(items[currentItem].params[1], pinPOT2);
  }

  // update of parameter 3 of currently selected effect
  btnParam3.update();
  if (btnParam3.fell()) {
      // update value to next click w/ + 10%  
      items[currentItem].params[2] = (items[currentItem].params[2] + 10) % 110;
      // reset to zero when clicked after it reached max 100%
      if (items[currentItem].params[2] > 100) { items[currentItem].params[2] = 0; }
      // update user interface
      redrawParam(2, 92); //
      // update eeprom
      saveParam(2);
      // PWM & map to output 3.3v
      applyPWM(items[currentItem].params[2], pinPOT3);  
  }
  
  // Set to BYPASS button - encoder's button to turn on Bypass program #6 and back
  btnBypass.update();
  if (btnBypass.fell()) {
      latchedState = !latchedState;  // Toggle latched state
      if (latchedState) {
          lastSelectedItem = currentItem; // Save previosly used effect before going to bypass
          currentItem = 5;                // Set to BYPASS 
          drawItem();
          updateOutputs();
          saveLastSelectedEffect();
      } else { //BYPASS OFF - restore
          //
          currentItem = lastSelectedItem;
          lastSelectedItem = 5;
          drawItem();
          updateOutputs();
          saveLastSelectedEffect(); 
      }
  }

}

// Function to convert 0-100 to PWM (0-255) and apply to pin
void applyPWM(int value, int pin) {
    int pwm = map(value, 0, pwmMaxValue, 0, 255);
    analogWrite(pin, pwm);
}

// draws non-updateable parts like frame and details 
void drawFrame() {
  // draw details
  tft.setTextSize(1);
  tft.setTextColor(ST77XX_WHITE);
  //
  for (int i = 0; i < 3; i++) {
      int barY = 60 + i * 16;
      // draw frame
      tft.drawRect(i, i, tft.width()-i*2, tft.height() - i*2, ST77XX_YELLOW);
      tft.setCursor(10, barY);
      // print zero left of bar
      tft.print("0");
      // draw white rect around the param
      tft.drawRect(20, barY, 100, 10, ST77XX_WHITE);
  }
}

void drawItem() {
  // Centered Title (Effect Number and Name)
  tft.setTextColor(ST77XX_MAGENTA); 
  tft.setTextSize(2);
  //
  int textX = 10;
  // erase previous info
  tft.fillRect(5,5,150,50,ST77XX_BLACK);
  // print current effect
  tft.setCursor(textX, 15);

  char buffer[20];  // Adjust size based on max item name length
  snprintf(buffer, sizeof(buffer), "%d.%s", currentItem + 1, items[currentItem].name);
  tft.println(buffer);

  // Parameters Display with Horizontal Bars
  tft.setTextSize(1);
  for (int i = 0; i < 3; i++) {
    uint16_t color = ST77XX_GREEN;
    int barY = 60 + i * 16;
    //
    redrawParam(i, barY);
  }
}

void redrawParam(int param, int y) {
    tft.setTextColor(ST77XX_WHITE);
    tft.fillRect(21, y+1, 98, 6, ST77XX_BLACK); // erase prev. data
    tft.fillRect(21, y+1, items[currentItem].params[param]-2, 4, ST77XX_GREEN); // Horizontal blue bar
    // erase prev. percent number
    tft.fillRect(126, y, 20, 10, ST77XX_BLACK); 
    tft.setCursor(128, y);                               // Right of bar
    tft.print(items[currentItem].params[param]);         // number of percents of the right
    tft.print("%");
}

void saveParam(int param) {
  int addr = EEPROM_PARAMS_START_ADDR + currentItem * 3 + param; // Calculate address
  EEPROM.update(addr, items[currentItem].params[param]); // Save only if value changes
}

void saveParameters() {
  for (int i = 0; i < 24; i++) {
    for (int j = 0; j < 3; j++) {
      //int addr = EEPROM_PARAMS_START_ADDR + i * 3 + j; // Calculate address
      EEPROM.update(EEPROM_PARAMS_START_ADDR + i * 3 + j, items[i].params[j]); // Save only if value changes
    }
  }
}

void loadParameters() {
  for (int i = 0; i < 24; i++) {
    for (int j = 0; j < 3; j++) {
      //int addr = EEPROM_PARAMS_START_ADDR + i * 3 + j; // Calculate address
      items[i].params[j] = EEPROM.read(EEPROM_PARAMS_START_ADDR + i * 3 + j);          // Load saved parameter
    }
  }
}

void saveLastSelectedEffect() {
  EEPROM.update(EEPROM_LAST_SEL_EFFECT_ADDR, currentItem);
}

int loadLastSelectedEffect() {
  return EEPROM.read(EEPROM_LAST_SEL_EFFECT_ADDR);
}

// Updates the digital outputs based on encoder clicks.
void updateOutputs() {
    int stepGroup = currentItem / 8;     // Determine the current group of 8 clicks.
    int stepPosition = currentItem % 8;  // Get position within the current group of 8 clicks.

    // Set A4-A6
    for (int i = 0; i < 3; i++) {
        digitalWrite(outputPins[i], (stepPosition >> i) & 1);  // Binary output
    }

    // FV <-> ROM1
    if (currentItem >= 8 && currentItem < 16) {      // ROM1
        digitalWrite(pinRom2, HIGH);           // Set A8 HIGH after 16 clicks, while A7 resets.
        digitalWrite(pinRom1, LOW );           // Set A7 HIGH after 8 clicks.
        digitalWrite(pinRomEnable, HIGH);
        // ROM1 <-> ROM2
    } else if (currentItem >= 16 && currentItem < 24) { // ROM2
            digitalWrite(pinRomEnable, HIGH);
            digitalWrite(pinRom1, HIGH);         // Set A7 HIGH in the range 0-7, 8-15
            digitalWrite(pinRom2, LOW );                                                
    } else if (currentItem >=0 && currentItem <8) {
            digitalWrite(pinRomEnable, LOW);
    }
    // checking direction CW - CCW
    if ( lastSelectedItem < currentItem ) { // UP
      // send pulse to FV1 to switch to ext Rom
      if (currentItem == 8 || currentItem == 16) {   // Set A8 LOW after 16 clicks, while A7 resets.
          digitalWrite(pinRomEnable, LOW);
          delay(15); 
          digitalWrite(pinRomEnable, HIGH);
      } else { 
          if (currentItem >= 0 && currentItem < 8) {
            digitalWrite(pinRom1, HIGH);
            digitalWrite(pinRom2, HIGH); 
            digitalWrite(pinRomEnable, LOW);
          }
      }
    } else { // DOWN
      if (currentItem == 15 || currentItem == 23) {
            digitalWrite(pinRomEnable, LOW);
            delay(15); 
            digitalWrite(pinRomEnable, HIGH);
        } else { 
          if (currentItem >= 0 && currentItem < 8) {
            digitalWrite(pinRom1, HIGH);
            digitalWrite(pinRom2, HIGH);
            digitalWrite(pinRomEnable, LOW);
          }
      }
    } 
    // 
    delayMicroseconds(5);  // Allow pin states to sett
}

void updatePotOutputs() {
    applyPWM(items[currentItem].params[0], pinPOT1);
    applyPWM(items[currentItem].params[1], pinPOT2);
    applyPWM(items[currentItem].params[2], pinPOT3);
}
